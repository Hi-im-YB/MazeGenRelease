
==================== FINAL INTERFACE ====================
2019-05-15 06:39:20.1284075 UTC

interface MazeGen-0.0.0-7uJHoMSSXBDDo6VkBfny1k:Algorithm.Prims 8022
  interface hash: e65090cbce7fe05cd6ace9e6d0603aa4
  ABI hash: a2253cdd60177960b666f2ce48f925a1
  export-list hash: 09465d08cac498d1b899b6bb72ce9f05
  orphan hash: 876b01e25089e4acc8262c4f836df60b
  flag hash: 216975b5d4ae400c63c3c0bbab116ef7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Algorithm.Prims.generate
  Algorithm.Prims.pickNode
module dependencies: Utils
package dependencies: Win32-2.5.4.1 array-0.5.2.0 base-4.10.1.0
                      containers-0.5.10.2 deepseq-1.4.3.0 ghc-prim-0.5.1.1
                      integer-gmp-1.0.1.0 random-1.1 time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Set.Internal
import  -/  Utils 6e6d1082e39227c34b4e918c318d7475
  exports: 1a346ea9081791d6cf43f670dfe87a1b
  Coord 842d05255a7c8c04e3f4ab73978349cd
  Graph e50ec7e0719e777fb4b2dcb5d93bb183
  connect 1c70ff94f657230021b8bed4dfc1219a
  neighbors 5cdf11a40be1c73f2cb36f68dfc7516e
  sample ff511aaa26233e630e42b88918d649a9
  start c1beddb7435d70588f052860cd449b3c
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  containers-0.5.10.2:Data.Set 7773c3ea4eb5302461702acb1f1cb916
import  -/  containers-0.5.10.2:Data.Set.Internal 2c0ebe68524799feb2ddd690bca723f0
import  -/  random-1.1:System.Random 51fb561c639e37ae48a8c45d441a262a
10b8ba0359604d3b3086c12251c2bb17
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt) -}
e973ee5b7a38c9ff543c66b1db05c18a
  $sfromList :: [Utils.Coord] -> Data.Set.Internal.Set Utils.Coord
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Utils.Coord]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Utils.Coord
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { (,) ipv ipv1 ->
                           Data.Set.Internal.Bin
                             @ Utils.Coord
                             1#
                             dt
                             (Data.Set.Internal.Tip @ Utils.Coord)
                             (Data.Set.Internal.Tip @ Utils.Coord) }
                        : ipv ipv1
                        -> case x of ww { (,) ww1 ww2 ->
                           case ipv of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild2 { GHC.Types.I# x# ->
                           case ww4 of wild3 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild4 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild5 {
                                  GHC.Types.False
                                  -> Algorithm.Prims.$sfromList_go3
                                       (Data.Set.Internal.Bin
                                          @ Utils.Coord
                                          1#
                                          ww
                                          (Data.Set.Internal.Tip @ Utils.Coord)
                                          (Data.Set.Internal.Tip @ Utils.Coord))
                                       wild1
                                  GHC.Types.True
                                  -> case ww2 of wild6 { GHC.Types.I# x1 ->
                                     case ww5 of wild7 { GHC.Types.I# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# x1 y) of wild8 {
                                       GHC.Types.False
                                       -> Algorithm.Prims.$sfromList_go3
                                            (Data.Set.Internal.Bin
                                               @ Utils.Coord
                                               1#
                                               ww
                                               (Data.Set.Internal.Tip @ Utils.Coord)
                                               (Data.Set.Internal.Tip @ Utils.Coord))
                                            wild1
                                       GHC.Types.True
                                       -> Algorithm.Prims.$wgo3
                                            1#
                                            (Data.Set.Internal.Bin
                                               @ Utils.Coord
                                               1#
                                               ww
                                               (Data.Set.Internal.Tip @ Utils.Coord)
                                               (Data.Set.Internal.Tip @ Utils.Coord))
                                            wild1 } } } }
                             GHC.Types.True
                             -> Algorithm.Prims.$wgo3
                                  1#
                                  (Data.Set.Internal.Bin
                                     @ Utils.Coord
                                     1#
                                     ww
                                     (Data.Set.Internal.Tip @ Utils.Coord)
                                     (Data.Set.Internal.Tip @ Utils.Coord))
                                  wild1 } } } } } } }) -}
22faa7783885d3f5dbd8348f6ff7c8ea
  $sfromList_go3 ::
    Data.Set.Internal.Set Utils.Coord
    -> [Utils.Coord] -> Data.Set.Internal.Set Utils.Coord
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
9f6819d943a6a497fd2ce11477b56abd
  $sinsert_$sgo3 ::
    Utils.Coord
    -> Utils.Coord
    -> Data.Set.Internal.Set Utils.Coord
    -> Data.Set.Internal.Set Utils.Coord
  {- Arity: 3, Strictness: <L,U><S,1*U(1*U(U),U(U))><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Utils.Coord)
                   (w1 :: Utils.Coord)
                   (w2 :: Data.Set.Internal.Set Utils.Coord) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 Algorithm.Prims.$w$sgo1 w ww1 ww2 w2 }) -}
ffcd51f960b8fa7f36f45e0a87481c75
  $smember_go3 ::
    Utils.Coord -> Data.Set.Internal.Set Utils.Coord -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Utils.Coord) (w1 :: Data.Set.Internal.Set Utils.Coord) ->
                 case w of ww { (,) ww1 ww2 ->
                 Algorithm.Prims.$wgo1 ww1 ww2 w1 }) -}
c06e48a757155c663189ccf54b314529
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Algorithm.Prims.$trModule3
                   Algorithm.Prims.$trModule1) -}
add4ef63cfa5f7b1a62ffbf8a59e617c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Prims.$trModule2) -}
202c77d843bb68c0c7b623e99e8ed7f1
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Algorithm.Prims"#) -}
ab91f788824e028c7b1bc909a3fca05c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Prims.$trModule4) -}
ae229b642200cf68347bc616dc57f882
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("MazeGen-0.0.0-7uJHoMSSXBDDo6VkBfny1k"#) -}
f2709f81d5c21e6f32a8a319e4d670d0
  $w$sgo1 ::
    Utils.Coord
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Set.Internal.Set Utils.Coord
    -> Data.Set.Internal.Set Utils.Coord
  {- Arity: 4, Strictness: <L,U><L,1*U(U)><L,U(U)><S,1*U>,
     Inline: [0] -}
362b2a74ad24b1880255b45c0d756386
  $w$sgo3 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Set.Internal.Set Utils.Coord
    -> Data.Set.Internal.Set Utils.Coord
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U)><S,1*U>, Inline: [0] -}
9149c6e77443478790d6fc44df6bb89a
  $wgenerate ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> System.Random.StdGen -> Utils.Graph
  {- Arity: 3, Strictness: <S,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (w :: System.Random.StdGen) ->
                 let {
                   wild1 :: GHC.Types.Int = GHC.Types.I# ww1
                 } in
                 let {
                   wild :: GHC.Types.Int = GHC.Types.I# ww
                 } in
                 case GHC.List.$witerate
                        @ (Data.Set.Internal.Set Utils.Coord, Utils.Graph,
                           Data.Set.Internal.Set Utils.Coord, System.Random.StdGen)
                        (\ (ds :: (Data.Set.Internal.Set Utils.Coord, Utils.Graph,
                                   Data.Set.Internal.Set Utils.Coord, System.Random.StdGen)) ->
                         case ds of wild2 { (,,,) fr graph seen g ->
                         case Algorithm.Prims.$wpickNode
                                wild
                                wild1
                                fr
                                graph
                                seen
                                g of ww2 { (#,,,#) ww3 ww4 ww5 ww6 ->
                         (ww3, ww4, ww5, ww6) } })
                        (Algorithm.Prims.$sfromList
                           (Utils.$wneighbors wild wild1 0# Algorithm.Prims.generate3),
                         Utils.$wstart ww wild1, Algorithm.Prims.generate1,
                         w) of ww2 { (#,#) ww3 ww4 ->
                 case GHC.List.$w!!
                        @ (Data.Set.Internal.Set Utils.Coord, Utils.Graph,
                           Data.Set.Internal.Set Utils.Coord, System.Random.StdGen)
                        (GHC.Types.:
                           @ (Data.Set.Internal.Set Utils.Coord, Utils.Graph,
                              Data.Set.Internal.Set Utils.Coord, System.Random.StdGen)
                           ww3
                           ww4)
                        (GHC.Prim.-#
                           (GHC.Prim.*# ww ww1)
                           1#) of wild2 { (,,,) ds graph ds1 ds2 ->
                 graph } }) -}
25cff1fcbd3c01cfdac7648241f2870d
  $wgo1 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Set.Internal.Set Utils.Coord
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,1*U(U)><S,1*U>,
     Inline: [0] -}
c833244af0fbcf584730c990462c1170
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set Utils.Coord
    -> [Utils.Coord]
    -> Data.Set.Internal.Set Utils.Coord
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
151fd2e0d8e8af20154cd6d110b33643
  $wpickNode ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Set.Internal.Set Utils.Coord
    -> Utils.Graph
    -> Data.Set.Internal.Set Utils.Coord
    -> System.Random.StdGen
    -> (# Data.Set.Internal.Set Utils.Coord, Utils.Graph,
          Data.Set.Internal.Set Utils.Coord, System.Random.StdGen #)
  {- Arity: 6, Strictness: <L,U(U)><L,U(U)><L,U><L,1*U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: Data.Set.Internal.Set Utils.Coord)
                   (w1 :: Utils.Graph)
                   (w2 :: Data.Set.Internal.Set Utils.Coord)
                   (w3 :: System.Random.StdGen) ->
                 let {
                   ds :: (Utils.Coord, System.Random.StdGen)
                   = case Utils.$wsample
                            @ Utils.Coord
                            (Data.Set.Internal.$fDataSet_go
                               @ (GHC.Types.Int, GHC.Types.Int)
                               (GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int))
                               w)
                            w3 of ww2 { (#,#) ww3 ww4 ->
                     (ww3, ww4) }
                 } in
                 let {
                   nc :: Utils.Coord = case ds of wild { (,) nc1 ng -> nc1 }
                 } in
                 let {
                   ns :: [Utils.Coord]
                   = case nc of ww3 { (,) ww4 ww5 ->
                     case ww4 of ww6 { GHC.Types.I# ww7 ->
                     Utils.$wneighbors ww ww1 ww7 ww5 } }
                 } in
                 let {
                   sn :: [Utils.Coord]
                   = GHC.List.filter
                       @ (GHC.Types.Int, GHC.Types.Int)
                       (\ (ds1 :: Utils.Coord) -> Algorithm.Prims.$smember_go3 ds1 w2)
                       ns
                 } in
                 let {
                   ds1 :: (Utils.Coord, System.Random.StdGen)
                   = case Utils.$wsample
                            @ Utils.Coord
                            sn
                            (case ds of wild { (,) nc1 ng -> ng }) of ww2 { (#,#) ww3 ww4 ->
                     (ww3, ww4) }
                 } in
                 (# case nc of ww2 { (,) ww3 ww4 ->
                    letrec {
                      go :: [(GHC.Types.Int, GHC.Types.Int)]
                            -> Data.Set.Internal.Set Utils.Coord
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds2 :: [(GHC.Types.Int, GHC.Types.Int)]) ->
                        case ds2 of wild {
                          [] -> w
                          : y ys
                          -> case GHC.List.elem
                                    @ Utils.Coord
                                    Algorithm.Prims.$s$fEq(,)
                                    y
                                    sn of wild1 {
                               GHC.Types.False
                               -> case y of ww5 { (,) ww6 ww7 ->
                                  Algorithm.Prims.$w$sgo1 ww5 ww6 ww7 (go ys) }
                               GHC.Types.True -> go ys } }
                    } in
                    Algorithm.Prims.$w$sgo3 ww3 ww4 (go ns) },
                    case ds1 of wild { (,) s' ng' -> Utils.connect w1 nc s' },
                    Algorithm.Prims.$sinsert_$sgo3 nc nc w2,
                    case ds1 of wild { (,) s' ng' -> ng' } #)) -}
6f0530fc1c91035d2acc36c3dac788d6
  generate ::
    (GHC.Types.Int, GHC.Types.Int)
    -> System.Random.StdGen -> Utils.Graph
  {- Arity: 2, Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: System.Random.StdGen) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 Algorithm.Prims.$wgenerate ww4 ww6 w1 } } }) -}
69e812198cf4bff9131898d1513a765e
  generate1 :: Data.Set.Internal.Set (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Set.Internal.Bin
                   @ (GHC.Types.Int, GHC.Types.Int)
                   1#
                   Algorithm.Prims.generate2
                   (Data.Set.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int))
                   (Data.Set.Internal.Tip @ (GHC.Types.Int, GHC.Types.Int))) -}
2fefde8b94ef1ff6bdc241c091c1a4d7
  generate2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Algorithm.Prims.generate3,
                  Algorithm.Prims.generate3)) -}
33bf8f6b049998722797e8f5af9db0f4
  generate3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
4ef18da0103a57bfd483d9c3091d7201
  pickNode ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Data.Set.Internal.Set Utils.Coord
    -> Utils.Graph
    -> Data.Set.Internal.Set Utils.Coord
    -> System.Random.StdGen
    -> (Data.Set.Internal.Set Utils.Coord, Utils.Graph,
        Data.Set.Internal.Set Utils.Coord, System.Random.StdGen)
  {- Arity: 5, Strictness: <S,1*U(U(U),U(U))><L,U><L,1*U><L,U><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: Data.Set.Internal.Set Utils.Coord)
                   (w2 :: Utils.Graph)
                   (w3 :: Data.Set.Internal.Set Utils.Coord)
                   (w4 :: System.Random.StdGen) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Algorithm.Prims.$wpickNode
                        ww1
                        ww2
                        w1
                        w2
                        w3
                        w4 of ww3 { (#,,,#) ww4 ww5 ww6 ww7 ->
                 (ww4, ww5, ww6, ww7) } }) -}
"SPEC/Algorithm.Prims $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                    GHC.Types.Int)
                                                           (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Algorithm.Prims.$s$fEq(,)
"SPEC/Algorithm.Prims fromList @ Coord" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                    Utils.Coord)
  Data.Set.Internal.fromList @ (GHC.Types.Int, GHC.Types.Int) $dOrd
  = Algorithm.Prims.$sfromList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

