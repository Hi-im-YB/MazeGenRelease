
==================== FINAL INTERFACE ====================
2019-05-15 06:39:28.5814517 UTC

interface main:Main 8022
  interface hash: d4e996f902902fe27838399ebf31e68b
  ABI hash: a379be5dafb8f94dca8d7f6f51bec9db
  export-list hash: 2c6d3b76f1a93e611a5b7c119a19105b
  orphan hash: 2ee1fc6ddf3db6063a7b702275fd354b
  flag hash: 96222813b1fe5ceafb301d0cb38356e5
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.c1
  Main.drawWalls
  Main.getAlgorithm
  Main.getConstant
  Main.main
  Main.square
module dependencies:
package dependencies: GLURaw-2.0.0.4 GLUT-2.7.0.13 MazeGen-0.0.0
                      ObjectName-1.1.0.1 OpenGL-3.0.2.1 OpenGLRaw-3.2.7.0
                      StateVar-1.1.1.0 Win32-2.5.4.1 aeson-1.2.4.0 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.10.1.0 base-compat-0.9.3 binary-0.8.5.1
                      bmp-1.2.6.3 bytestring-0.10.8.2 containers-0.5.10.2 deepseq-1.4.3.0
                      disjoint-set-0.2 dlist-0.8.0.4 fixed-0.2.1.1 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 gloss-1.11.1.1 gloss-rendering-1.11.1.1
                      half-0.2.2.3 hashable-1.2.7.0 integer-gmp-1.0.1.0
                      integer-logarithms-1.0.2.1 mtl-2.2.2 primitive-0.6.3.0 random-1.1
                      safe-0.3.17 scientific-0.3.5.3 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.3.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.1
orphans: gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  MazeGen-0.0.0:Algorithm.Backtracker ead5780953c2cb9a34ad412b1e201831
import  -/  MazeGen-0.0.0:Algorithm.Ellers 1a6823878c1498dc1ce5c257f041def4
import  -/  MazeGen-0.0.0:Algorithm.GrowingTree 7624761782f92d44449d8ef51bce8e42
import  -/  MazeGen-0.0.0:Algorithm.HuntKill 5777d00ce0dfa6b13a2b7545f657b9e8
import  -/  MazeGen-0.0.0:Algorithm.Kruskals c510702fea6148a876e6702fc5beb7d8
import  -/  MazeGen-0.0.0:Algorithm.Prims a2253cdd60177960b666f2ce48f925a1
import  -/  MazeGen-0.0.0:Algorithm.Sidewinder cc9958189a3ec08be046a0d9a5a7f2e4
import  -/  MazeGen-0.0.0:ParseConfig 841a40ac1526cf817a005b5c1391f6b1
import  -/  MazeGen-0.0.0:Solver c023fa512f186ee3f28a655e425eda48
import  -/  MazeGen-0.0.0:Utils 6e6d1082e39227c34b4e918c318d7475
import  -/  base-4.10.1.0:Data.Either 79b3aa7621c39f085b8b2cedd9d3b61b
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:Data.Functor b59a97e639e05373a94999f9bb899676
import  -/  base-4.10.1.0:Data.Maybe f51a1c24c4c11dca22ee9c2ea0071a10
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:System.IO 1fb8f1d116df69c8750950ac088a90e6
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 797320bfb8012e1e94591960fb41f1fe
import  -/  containers-0.5.10.2:Data.Map.Internal 765cdf2fdf1dcff75ecb49b5edcb6b02
import  -/  containers-0.5.10.2:Data.Map.Strict b15cb8b5231a69150e977b51817e845b
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  gloss-1.11.1.1:Graphics.Gloss 0f1fa14ea1fa27b0bae3bad4d1e5c380
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Color 217f0280e20ad30b57222bb7ce90401c
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Display 03b3f086bc16a0337ca2d7e67d14bed2
import  -/  gloss-1.11.1.1:Graphics.Gloss.Data.Picture c0df265f8246a66d829e57b7542396f9
import  -/  gloss-1.11.1.1:Graphics.Gloss.Interface.Environment 9cbe3856c09a500adb2d81c2d9ff8e7e
import  -/  gloss-1.11.1.1:Graphics.Gloss.Interface.Pure.Display cad296b3126fcdef39927f259eeb8de9
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Color 59bb7549b9f749a7e6b51ce2387a7c4c
import  -/  gloss-rendering-1.11.1.1:Graphics.Gloss.Internals.Data.Picture e9e1015288dc01b26faf6bdeeb42d59b
import  -/  random-1.1:System.Random 51fb561c639e37ae48a8c45d441a262a
372924a6ca36621ebf9c54e92c3ba385
  $s$fEq(,) :: GHC.Classes.Eq (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt)
                  (GHC.Classes.$fEq(,)_$c/=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fEqInt
                     GHC.Classes.$fEqInt) -}
6c7e89479a60806da8c957aea968ef48
  $s$fOrd(,) :: GHC.Classes.Ord (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int, GHC.Types.Int)
                  Main.$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (\ (a1 :: (GHC.Types.Int, GHC.Types.Int))
                     (b1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ GHC.Types.Int
                     @ GHC.Types.Int
                     GHC.Classes.$fOrdInt
                     GHC.Classes.$fOrdInt) -}
9d72b2fddb818bcd8919052935e0f1f3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
3108ceeaf5a318be844de422b45de9d8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
33bd129667974f0a0ba4a893af79107d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3e4f1cebc9cf4280d457cda67ed31725
  $wdrawWalls ::
    ((GHC.Types.Int, GHC.Types.Int)
     -> Graphics.Gloss.Internals.Data.Picture.Point)
    -> Utils.Graph
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (# [Graphics.Gloss.Internals.Data.Picture.Picture] #)
  {- Arity: 4, Strictness: <L,C(U)><L,1*U><L,U(U)><L,U(U)>,
     Inline: [0] -}
1ede9e326a81749ca86e0deb34ef27ea
  $wgetAlgorithm ::
    ParseConfig.Algorithm
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> System.Random.StdGen
    -> Utils.Graph
  {- Arity: 4, Strictness: <S,1*U><L,U(U)><L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ (w :: ParseConfig.Algorithm)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: System.Random.StdGen) ->
                 case w of wild {
                   ParseConfig.Backtracker
                   -> case ww of ww3 { GHC.Types.I# ww4 ->
                      Algorithm.Backtracker.$wgenerate ww4 ww1 w1 }
                   ParseConfig.Prims
                   -> case ww of ww3 { GHC.Types.I# ww4 ->
                      case ww1 of ww5 { GHC.Types.I# ww6 ->
                      Algorithm.Prims.$wgenerate ww4 ww6 w1 } }
                   ParseConfig.HuntKill
                   -> case ww of ww3 { GHC.Types.I# ww4 ->
                      Algorithm.HuntKill.$wgenerate ww4 ww1 w1 }
                   ParseConfig.GrowingTree
                   -> case ww of ww3 { GHC.Types.I# ww4 ->
                      Algorithm.GrowingTree.$wgenerate ww4 ww1 w1 }
                   ParseConfig.Sidewinder
                   -> case ww1 of ww3 { GHC.Types.I# ww4 ->
                      Algorithm.Sidewinder.$wgenerate ww ww4 w1 }
                   ParseConfig.Kruskals
                   -> case ww of ww3 { GHC.Types.I# ww4 ->
                      Algorithm.Kruskals.$wgenerate ww4 ww1 w1 }
                   ParseConfig.Ellers
                   -> case ww of ww3 { GHC.Types.I# ww4 ->
                      case ww1 of ww5 { GHC.Types.I# ww6 ->
                      Algorithm.Ellers.$wgenerate ww4 ww6 w1 } } }) -}
a11f88512abcf7efad2e4080b834fe80
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> GHC.Types.Int -> Data.Map.Internal.Map Utils.Coord a -> a
  {- Arity: 3, Strictness: <S,U><S(S),1*U(U)><S,1*U>, Inline: [0] -}
9da2d9eef5211323c97bb1376888e61d
  $wsquare ::
    (Graphics.Gloss.Internals.Data.Picture.Point
     -> Graphics.Gloss.Internals.Data.Picture.Point)
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> Graphics.Gloss.Internals.Data.Color.Color
    -> (# Graphics.Gloss.Internals.Data.Color.Color,
          Graphics.Gloss.Internals.Data.Picture.Picture #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(U)><L,U(U)><L,U(U)><L,U>, Inline: [0],
     Unfolding: (\ (w :: Graphics.Gloss.Internals.Data.Picture.Point
                         -> Graphics.Gloss.Internals.Data.Picture.Point)
                   (ww :: GHC.Types.Float)
                   (ww1 :: GHC.Types.Float)
                   (w1 :: Graphics.Gloss.Internals.Data.Color.Color) ->
                 (# w1,
                    Graphics.Gloss.Internals.Data.Picture.Polygon
                      (GHC.Types.:
                         @ (GHC.Types.Float, GHC.Types.Float)
                         (w (ww, ww1))
                         (GHC.Types.:
                            @ (GHC.Types.Float, GHC.Types.Float)
                            (w (case ww of wild2 { GHC.Types.F# x ->
                                GHC.Types.F# (GHC.Prim.plusFloat# x 1.0#) },
                                ww1))
                            (GHC.Types.:
                               @ (GHC.Types.Float, GHC.Types.Float)
                               (w (case ww of wild2 { GHC.Types.F# x ->
                                   GHC.Types.F# (GHC.Prim.plusFloat# x 1.0#) },
                                   case ww1 of wild2 { GHC.Types.F# x ->
                                   GHC.Types.F# (GHC.Prim.plusFloat# x 1.0#) }))
                               (GHC.Types.:
                                  @ (GHC.Types.Float, GHC.Types.Float)
                                  (w (ww,
                                      case ww1 of wild2 { GHC.Types.F# x ->
                                      GHC.Types.F# (GHC.Prim.plusFloat# x 1.0#) }))
                                  (GHC.Types.:
                                     @ (GHC.Types.Float, GHC.Types.Float)
                                     (w (ww, ww1))
                                     (GHC.Types.[] @ (GHC.Types.Float, GHC.Types.Float))))))) #)) -}
30fe63f43404b9ba878b6aea7b9fa10c
  c1 :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLC(S)),1*U(A,A,A,A,A,A,1*C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dNum :: GHC.Num.Num a) ->
                 GHC.Num.fromInteger @ a $dNum Main.c2) -}
97c255a60611cae71efc67b8a5fd8ade
  c2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (5) -}
edb76d8756afdfaaa9282cbdb35c32a8
  drawWalls ::
    ((GHC.Types.Int, GHC.Types.Int)
     -> Graphics.Gloss.Internals.Data.Picture.Point)
    -> Utils.Graph
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 3, Strictness: <L,C(U)><L,1*U><S,1*U(U(U),U(U))>m14,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Gloss.Internals.Data.Picture.Point)
                   (w1 :: Utils.Graph)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case Main.$wdrawWalls w w1 ww1 ww2 of ww3 { Unit# ww4 ->
                 Graphics.Gloss.Internals.Data.Picture.Pictures ww4 } }) -}
0e5bd6d2f4595d792e34451a1e3e204d
  getAlgorithm ::
    ParseConfig.Algorithm
    -> (GHC.Types.Int, GHC.Types.Int)
    -> System.Random.StdGen
    -> Utils.Graph
  {- Arity: 3, Strictness: <S,1*U><S,1*U(U(U),U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: ParseConfig.Algorithm)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: System.Random.StdGen) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 Main.$wgetAlgorithm w ww1 ww2 w2 }) -}
7aaeee5fd507445288f9f03c82e7186f
  getConstant ::
    GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
    -> GHC.Types.Float
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Types.Float)
                   (h :: GHC.Types.Float)
                   (n :: GHC.Types.Float)
                   (m :: GHC.Types.Float) ->
                 case w of wild2 { GHC.Types.F# x ->
                 case n of wild3 { GHC.Types.F# y ->
                 case h of wild1 { GHC.Types.F# x1 ->
                 case m of wild5 { GHC.Types.F# y1 ->
                 case GHC.Prim.divideFloat#
                        (GHC.Prim.minusFloat# (GHC.Prim.minusFloat# x 5.0#) 5.0#)
                        y of wild4 { DEFAULT ->
                 case GHC.Prim.divideFloat#
                        (GHC.Prim.minusFloat# (GHC.Prim.minusFloat# x1 5.0#) 5.0#)
                        y1 of wild6 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.leFloat# wild4 wild6) of wild7 {
                   GHC.Types.False -> GHC.Types.F# wild6
                   GHC.Types.True -> GHC.Types.F# wild4 } } } } } } }) -}
45382869fccdc8575fe927b5bd9b3648
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
4a343b9d0dd11ad0a94d84a493982d84
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4dc91cfea0f5b81a2ef343b015b3dd25
  square ::
    (Graphics.Gloss.Internals.Data.Picture.Point
     -> Graphics.Gloss.Internals.Data.Picture.Point)
    -> Graphics.Gloss.Internals.Data.Picture.Point
    -> Graphics.Gloss.Internals.Data.Color.Color
    -> Graphics.Gloss.Internals.Data.Picture.Picture
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><S,1*U(U(U),U(U))><L,U>m10, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Graphics.Gloss.Internals.Data.Picture.Point
                         -> Graphics.Gloss.Internals.Data.Picture.Point)
                   (w1 :: Graphics.Gloss.Internals.Data.Picture.Point)
                   (w2 :: Graphics.Gloss.Internals.Data.Color.Color) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case Main.$wsquare w ww1 ww2 w2 of ww3 { (#,#) ww4 ww5 ->
                 Graphics.Gloss.Internals.Data.Picture.Color ww4 ww5 } }) -}
"SPEC/Main $fEq(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                         GHC.Types.Int)
                                                (v :: GHC.Classes.Eq GHC.Types.Int)
  GHC.Classes.$fEq(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fEq(,)
"SPEC/Main $fOrd(,) @ Int @ Int" [orphan] forall (v1 :: GHC.Classes.Ord
                                                          GHC.Types.Int)
                                                 (v :: GHC.Classes.Ord GHC.Types.Int)
  GHC.Classes.$fOrd(,) @ GHC.Types.Int @ GHC.Types.Int v v1
  = Main.$s$fOrd(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

